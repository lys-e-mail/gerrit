{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "42f2b5e7_79a2cdc1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2024-05-17T12:31:33Z",
      "side": 1,
      "message": "Could you please try to create a new Executor instead of modifying the existing one which supports parking mechanism? Then you can use it instead of a default executor in upstream code, while we can continue to use the old one.\nOtherwise, we will have to carefully review all related changes to avoid unexpected problems on our side (and probably revert some of them if they block us or suspicious).",
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56093ca3_2f3befad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2024-05-17T20:58:52Z",
      "side": 1,
      "message": "\u003e Could you please try to create a new Executor instead of modifying the existing one which supports parking mechanism? Then you can use it instead of a default executor in upstream code, while we can continue to use the old one.\n\nYou mean create a new Executor and somehow configure Gerrit to use that one for any created queues?\n\n\u003e Otherwise, we will have to carefully review all related changes to avoid unexpected problems on our side (and probably revert some of them if they block us or suspicious).\n\nCareful review would be welcome ðŸ˜Š And I think we all expect that if there\u0027s a change merged (by anyone) that\u0027s later identified as causing a regression then it\u0027s normal for that change to be reverted until the issue is fixed.\n\nI don\u0027t think this change was rushed in or anything and we spent most of the development time on trying to write good tests for it.",
      "parentUuid": "42f2b5e7_79a2cdc1",
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "174001b5_6224ff43",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2024-05-21T08:27:42Z",
      "side": 1,
      "message": "Is it possible to rework this feature and isolate it?\nE.g. create a separate executor which support parked tasks and use the new executor based on a config value.\nThis code can affect our instances of gerrit and with the current implementation we can\u0027t disable new functionality. We have to carefully review it and can decide to rollback it until we carefully review it and we would like to avoid it.",
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad0dacb0_5f6480f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2024-05-21T09:32:50Z",
      "side": 1,
      "message": "Please ignore. I was wrong - the WorkQueue is not used internally in prod code (only in tests), so no need to change anything.",
      "parentUuid": "174001b5_6224ff43",
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf34b829_32143da3",
        "filename": "java/com/google/gerrit/server/git/WorkQueue.java",
        "patchSetId": 17
      },
      "lineNbr": 122,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2024-05-17T12:31:33Z",
      "side": 1,
      "message": "The method is called isReadyToStart and it shouldn\u0027t have side effect (acquiring resources). Can you make this interface more clear? Or provide some context which resources and when should be allocated in isReadyToStart?",
      "range": {
        "startLine": 122,
        "startChar": 10,
        "endLine": 122,
        "endChar": 98
      },
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e78a7a7e_c9ca2f80",
        "filename": "java/com/google/gerrit/server/git/WorkQueue.java",
        "patchSetId": 17
      },
      "lineNbr": 122,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2024-05-17T20:58:52Z",
      "side": 1,
      "message": "I\u0027m happy to try and improve it, but I\u0027m not sure what you\u0027re looking for that isn\u0027t already explained in the [new dev-plugins section](https://gerrit-review.googlesource.com/c/gerrit/+/247812/17/Documentation/dev-plugins.txt).\n\n\u003e The method is called isReadyToStart and it shouldn\u0027t have side effect (acquiring resources).\n\nI\u0027m not sure why you think this shouldn\u0027t have any side effect. Are you saying that based on the naming you didn\u0027t expect it to acquire resources?",
      "parentUuid": "bf34b829_32143da3",
      "range": {
        "startLine": 122,
        "startChar": 10,
        "endLine": 122,
        "endChar": 98
      },
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "377d7273_7d734e50",
        "filename": "java/com/google/gerrit/server/git/WorkQueue.java",
        "patchSetId": 17
      },
      "lineNbr": 122,
      "author": {
        "id": 1012457
      },
      "writtenOn": "2024-05-17T22:01:09Z",
      "side": 1,
      "message": "TBD.\n\n\"Resources needed to enforce quotas should be acquired in this method via non-blocking means...\"",
      "parentUuid": "bf34b829_32143da3",
      "range": {
        "startLine": 122,
        "startChar": 10,
        "endLine": 122,
        "endChar": 98
      },
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd373476_e063b217",
        "filename": "java/com/google/gerrit/server/git/WorkQueue.java",
        "patchSetId": 17
      },
      "lineNbr": 122,
      "author": {
        "id": 1012457
      },
      "writtenOn": "2024-05-17T22:03:46Z",
      "side": 1,
      "message": "\u003e TBD.\n\u003e \n\u003e \"Resources needed to enforce quotas should be acquired in this method via non-blocking means...\"\n\nIgnore, this. It was a draft, I didn\u0027t mean to publish.",
      "parentUuid": "377d7273_7d734e50",
      "range": {
        "startLine": 122,
        "startChar": 10,
        "endLine": 122,
        "endChar": 98
      },
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9b5bffc_d48765c7",
        "filename": "java/com/google/gerrit/server/git/WorkQueue.java",
        "patchSetId": 17
      },
      "lineNbr": 639,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2024-05-17T12:31:33Z",
      "side": 1,
      "message": "Could you please explain the logic with incrementCorePooSize? If the task is not ready to start, why the code wants to have more capacity in the thread pool?",
      "range": {
        "startLine": 639,
        "startChar": 8,
        "endLine": 639,
        "endChar": 35
      },
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20925918_c509e8b0",
        "filename": "java/com/google/gerrit/server/git/WorkQueue.java",
        "patchSetId": 17
      },
      "lineNbr": 639,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2024-05-17T20:58:52Z",
      "side": 1,
      "message": "\u003e Could you please explain the logic with incrementCorePooSize? If the task is not ready to start, why the code wants to have more capacity in the thread pool?\n\nIt\u0027s explained briefly in the commit message. The intent is to maintain the same number of threads available to non-parked tasks. For example, if my pool has 2 threads total, 1 task running, and a new task is submitted and then parked, we want to maintain the 1 thread available for other tasks. We do that by increasing the pool size while the task is parked and then shrinking it again once the task is ready to start.",
      "parentUuid": "e9b5bffc_d48765c7",
      "range": {
        "startLine": 639,
        "startChar": 8,
        "endLine": 639,
        "endChar": 35
      },
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "883ac87e_b423b3d9",
        "filename": "java/com/google/gerrit/server/git/WorkQueue.java",
        "patchSetId": 17
      },
      "lineNbr": 639,
      "author": {
        "id": 1012457
      },
      "writtenOn": "2024-05-17T22:01:09Z",
      "side": 1,
      "message": "A parked task causes the current thread to wait until it is un-parked, thereby reducing the pool size available for other tasks to run. So, it increments the pool size so that parked tasks don\u0027t block other tasks. The  temporary bump to pool size is un-done when the parked task is un-parked.",
      "parentUuid": "e9b5bffc_d48765c7",
      "range": {
        "startLine": 639,
        "startChar": 8,
        "endLine": 639,
        "endChar": 35
      },
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a414064_7dedfcfc",
        "filename": "java/com/google/gerrit/server/git/WorkQueue.java",
        "patchSetId": 17
      },
      "lineNbr": 639,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2024-05-21T08:27:42Z",
      "side": 1,
      "message": "IIUC, the pool size is not decremented if await is succeed - why is it so? Am I miss something?\n\nAnother questions:\n1) if we have 100 parked tasks - each task occupies its own thread and gerrit starts 100 additional threads. If all tasks are unparked at the same time - gerrit will have 100 additional running threads.\nIf it is so - I think this is unsafe.\n\n2) Parked tasks doesn\u0027t have timeouts, so they can remain in the queue forever. Is it expected?",
      "parentUuid": "883ac87e_b423b3d9",
      "range": {
        "startLine": 639,
        "startChar": 8,
        "endLine": 639,
        "endChar": 35
      },
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e04eed1_7d0b5998",
        "filename": "java/com/google/gerrit/server/git/WorkQueue.java",
        "patchSetId": 17
      },
      "lineNbr": 639,
      "author": {
        "id": 1012457
      },
      "writtenOn": "2024-05-21T22:42:32Z",
      "side": 1,
      "message": "\u003e IIUC, the pool size is not decremented if await is succeed - why is it so? Am I miss something?\n\nIt will be decremented right before the task is un-parked. See `updateParked()` L701.\n\n\u003e \n\u003e Another questions:\n\u003e 1) if we have 100 parked tasks - each task occupies its own thread and gerrit starts 100 additional threads. If all tasks are unparked at the same time - gerrit will have 100 additional running threads.\n\nNot really, because the temporary bump to pool size is undone when a task are unparked.\n\n\n\u003e If it is so - I think this is unsafe.\n\n\u003e \n\u003e 2) Parked tasks doesn\u0027t have timeouts, so they can remain in the queue forever. Is it expected?\n\nYes, it is expected. Do you see any problems due to this?",
      "parentUuid": "5a414064_7dedfcfc",
      "range": {
        "startLine": 639,
        "startChar": 8,
        "endLine": 639,
        "endChar": 35
      },
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96b61a9c_40dac85d",
        "filename": "javatests/com/google/gerrit/acceptance/server/util/TaskParkerIT.java",
        "patchSetId": 17
      },
      "lineNbr": 119,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2024-05-17T10:06:58Z",
      "side": 1,
      "message": "The tests are modifying these parkers, e.g. setting delegates.\n\nWhen running the tests on parallel threads, sharing those instances potentially causes the tests to collide.",
      "range": {
        "startLine": 118,
        "startChar": 2,
        "endLine": 119,
        "endChar": 45
      },
      "fixSuggestions": [
        {
          "fixId": "2480d520_88508ef7",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "javatests/com/google/gerrit/acceptance/server/util/TaskParkerIT.java",
              "range": {
                "startLine": 118,
                "startChar": 0,
                "endLine": 120,
                "endChar": 0
              },
              "replacement": "  private ForwardingParker forwarder;\n  private ForwardingParker forwarder2;\n"
            },
            {
              "path": "javatests/com/google/gerrit/acceptance/server/util/TaskParkerIT.java",
              "range": {
                "startLine": 158,
                "startChar": 0,
                "endLine": 159,
                "endChar": 0
              },
              "replacement": "        forwarder \u003d new ForwardingParker();\n"
            }
          ]
        }
      ],
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "359fe89b_23f5c73c",
        "filename": "javatests/com/google/gerrit/acceptance/server/util/TaskParkerIT.java",
        "patchSetId": 17
      },
      "lineNbr": 119,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2024-05-17T20:58:52Z",
      "side": 1,
      "message": "Thanks for spotting this. We\u0027ll push a change to fix it.",
      "parentUuid": "96b61a9c_40dac85d",
      "range": {
        "startLine": 118,
        "startChar": 2,
        "endLine": 119,
        "endChar": 45
      },
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acf12556_dba13395",
        "filename": "javatests/com/google/gerrit/acceptance/server/util/TaskParkerIT.java",
        "patchSetId": 17
      },
      "lineNbr": 119,
      "author": {
        "id": 1012457
      },
      "writtenOn": "2024-05-17T22:01:09Z",
      "side": 1,
      "message": "@nitzan@google.com I tried applying you suggestion and ran into some NPEs. I can look at them, but it will be good to know how to reproduce the parallel threads issue. How do we run tests using bazel with parallel threads?",
      "parentUuid": "359fe89b_23f5c73c",
      "range": {
        "startLine": 118,
        "startChar": 2,
        "endLine": 119,
        "endChar": 45
      },
      "revId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR -branch:refs/heads/master)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR -branch:refs/heads/master)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["file:\"^~(polygerrit-ui/.*)$\"","branch:refs/heads/master"],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Forward-Compatibility",
        "description": {
          "value": "Changes to NoteDb, data serialization in ChangeField, or the entities packages require careful consideration. Make sure your change is forward compatible and add the footer \u0027Forward-Compatible: checked\u0027 to your commit message"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/server/index/.*Field\\\\.java\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Forward-Compatible\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/server/index/.*Field\\\\.java\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\"","file:\"^java/com/google/gerrit/entities/.*\\\\.java$\"","file:\"^java/com/google/gerrit/server/index/.*Field\\\\.java\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Forward-Compatible\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Frontend-Verified",
        "description": {
          "value": "Frontend compilation, tests, and linters pass"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:refs/heads/master AND (file:\"^polygerrit-ui/.*\" OR is:merge)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Frontend-Verified\u003dMAX AND -label:Frontend-Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:refs/heads/master AND (file:\"^polygerrit-ui/.*\" OR is:merge)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["branch:refs/heads/master"],"failingAtoms":["file:\"^polygerrit-ui/.*\"","is:merge"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Frontend-Verified=MAX AND -label:Frontend-Verified=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":["branch:refs/meta/config","is:pure-revert"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR is:merge OR -branch:refs/heads/master)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR is:merge OR -branch:refs/heads/master)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["file:\"^~(polygerrit-ui/.*)$\"","branch:refs/heads/master"],"failingAtoms":["branch:refs/meta/config","is:merge"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2eef9be4a73f189af4212dc14c02f66f6b30f303",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}